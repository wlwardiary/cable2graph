#!/usr/bin/env python
# 
# GPLv3 2011-2012 by anonymous
# 
# simplified version of g2svg for visjs
# 

import igraph, math, csv, time, json
from sys import argv, exit
from os import listdir, path, environ, closerange
from jinja2 import Template, Environment, FileSystemLoader
from optparse import OptionParser
from datetime import datetime
try:
    from collections import Counter
except ImportError:
    print "ERR: please use python >= 2.7"
    exit(1)

environ['TZ'] = 'UTC'
time.tzset()

parser = OptionParser()
parser.add_option("-t", "--tmpl", dest="template",
    default="svg.tmpl",
    help="Jinja html/svg template NAME. Default: svg.tmpl", 
    metavar="NAME")

parser.add_option("-g", "--gml", dest="gmlfile",
    help="Single source graph in gml format FILE", metavar="FILE")

parser.add_option("-i", "--include", dest="gmllist",
    help="Load all .gml graphs listed in FILE", metavar="FILE")

parser.add_option("-d", "--dest", dest="destdir",
    default=".",
    help="Destination DIR. Default: current dir", 
    metavar="DIR")

parser.add_option("-s", "--subjects", dest="subjects",
    default="data/subjects.list",
    help="Load map of label -> subject. Default: subjects.list", metavar="FILE")

parser.add_option("-u", "--uri", dest="uri",
    default="data/wikileaks.org.map",
    help="Load map of label -> uri from FILE. Default: wikileaks.org.map", metavar="FILE")

parser.add_option("-l", "--layout", dest="layout",
    help="Use layout NAME", metavar="NAME")

(options, args) = parser.parse_args()

graph_files = set()
if options.gmlfile:
    graph_files.add(options.gmlfile.strip())

if options.gmllist:
    gfh = open(options.gmllist)
    for gf in gfh.readlines():
        graph_files.add(gf.strip())
    gfh.close()

if len(graph_files) < 1:
    print "No source .gml files"
    exit(1)

def format_timestamp(ts, tsformat = '%Y-%m-%d'):
    d = datetime.fromtimestamp(float(ts))
    return d.strftime(tsformat)

# custom filter since it's not possible to filter AND count in the template
# this filters and can be piped to |length
def has_timestamp(values):
    return [ v for v in values if v.has_key('timestamp') and float(v['timestamp']) > 0 ]

CURDIR = path.dirname(path.abspath(__file__))
env = Environment(loader=FileSystemLoader(CURDIR))
env.filters['formatts'] = format_timestamp
env.filters['has_timestamp'] = has_timestamp
svg_tmpl = env.get_template(options.template)

# load optional subject map
if options.subjects:
    smap = {}
    f = open(options.subjects)
    for l in f.readlines():
        k,v = l.split(' ',1)
        smap[k.strip()] = v.strip()
    f.close()

for gml in graph_files:

    destfile = "%s/%s.html" % (options.destdir, path.basename(gml))
    if path.exists(destfile):
        print "%s exists. skipping" % destfile
        continue

    # load graph from file
    g = igraph.load(gml)

    # apply subjects to graph
    if options.subjects:
        subjects = []
        for l in g.vs.get_attribute_values('label'):
            if l in smap:
                subjects.append(smap[l])
            else:
                subjects.append('')

        g.vs['subject'] = subjects

    edges = [ {'from': e.source, 'to': e.target} for e in g.es ]
    nodes = [ {'id': n.index, 'label': n['label'], 'title': n['subject'] } for n in g.vs ]

    with open(destfile,'w') as dfh:
        dfh.write(svg_tmpl.render(
            filename = path.basename(destfile),
            edges = json.dumps(edges), 
            nodes = json.dumps(nodes)
        ))
    del g
    print "%s -> %s" % (gml, destfile)
